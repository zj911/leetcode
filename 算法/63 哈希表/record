哈希表：通过1个哈希函数来计算数据存储位置的数据结构
insert(key, value)：插入键值对
get(key):存在key则返回value， 否则返回空值
delete(key):删除键为key的键值对

直接寻址表：
当关键字的全域U比较小时，直接寻址是一种简单有效的方法
下标对应关键字 -- 5：5 5的值对应数据5

哈希函数：
    构建大小为m的寻址表T
    key为k的元素放到h(k)位置上
    h(k)是1个函数，其将域U映射到表T[0,1,2,3...m-1]

哈希表：由1个直接寻址表和1个哈希函数组成
例子：
长度为7的哈希表，哈希函数为h(k) = k % 7，元素{14，22，3，5}的存储方式如下图
14 22  _  3  _  5  _
0  1   2  3  4  5  6

哈希冲突：俩个值映射到同1位置，造成冲突
解决哈希冲突：
开放寻址法：如何位置已经有值，向后探查新的位置进行存储
    线性探查：探查i+1,i+2,i+3,i+4,...
    二次探查：探查i+1*1,i+2*2,i+3*3,i+4*4,...
    二度哈希：有n个哈希函数，当第1个冲突，使用第二个。。。

拉链法：当冲突发生的时候，冲突的元素被加到该位置链表的最后
0 -> 496 -> 896

